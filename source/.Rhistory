)
fit_3  = sampling(stan_model_3,
data=data,
chains=3,
iter=2000,
warmup=1000
)
fit_4  = sampling(stan_model_4,
data=data,
chains=3,
iter=2000,
warmup=1000
)
posterior_1 = as.matrix(fit_1)
posterior_2 = as.matrix(fit_2)
posterior_3 = as.matrix(fit_3)
posterior_4 = as.matrix(fit_4)
density_1=density(posterior_1[, "b[2]"])
density_2=density(posterior_2[, "b[2]"])
density_3=density(posterior_3[, "b[2]"])
density_4=density(posterior_4[, "b[2]"])
par(mfrow=c(1,1))
plot(density_1, xlim=c(0,4), ylim=c(0,3), main="slope for n_obs=10")
lines(density_2, col="red")
lines(density_3, col="blue")
lines(density_4, col="green")
legend("topright", legend=c("flat","N(0,10)","N(0,1)","N(0,0.1)"), bty="n", lwd=rep(2,4), col=c("black","red","blue","green"))
rm(list=ls())
library(rstan)
library(coda)
library(BayesianTools)
rstan_options(auto_write = TRUE)
options(mc.cores = 3) # number of CPU cores
set.seed(123) # initiate random number generator for reproducability
n=50
a=1.0
b=0.5
c=0.4
sigma=0.15
x = runif(n=n, min=0, max=1)
y = rnorm(n=n, mean=a+b*x+c*x^2, sd=sigma)
y = rnorm(n=n, mean=a+b*x+c*x^2, sd=sigma)
df = data.frame(x=x,
y=y)
plot(df)
#------------------------------------------------------------------------------
# define stan model
#------------------------------------------------------------------------------
stan_code = '
data {
int n;
vector[n] x;
vector[n] y;
}
parameters {
real a;
real b;
real<lower=0> sigma;  // standard deviation
}
model {
// priors
a ~ normal(0, 10);
b ~ normal(0, 10);
sigma ~ normal(0, 10);
// likelihood
y ~ normal(a+b*x, sigma);
}
'
#------------------------------------------------------------------------------
# prepare data and compile model
#------------------------------------------------------------------------------
data = list(n=n,
x=df$x,
y=df$y)
stan_model = stan_model(model_code=stan_code)
#------------------------------------------------------------------------------
# MCMC sampling
#------------------------------------------------------------------------------
fit  = sampling(stan_model,
data=data,
chains=3,
iter=2000,
warmup=1000
)
#------------------------------------------------------------------------------
# MCMC sampling
#------------------------------------------------------------------------------
fit  = sampling(stan_model,
data=data,
chains=3,
iter=2000,
warmup=1000
)
print(fit, digits=3, probs=c(0.025, 0.975))
plot(fit)
plot(As.mcmc.list(fit)) # from coda package
fit
View(fit)
posterior=as.matrix(fit)
str(posterior)
head(posterior)
posterior[, 1]
str(posterior[, 1])
head(posterior[, 1])
hist(posterior[, 1])
hist(posterior[, 1])
hist(posterior[, "a"])
str(posterior[1, ])
posterior[1, ]
pairs(fit, pars=c("a","b","sigma"))
correlationPlot(posterior[, 1:3], thin=1) # from BayesianTools package
hist(posterior[, "b"], xlim=c(0,max(posterior[, "b"])))
abline(v=0, col="red", lwd=2)
sum(posterior[, "b"]>0)/nrow(posterior)
(posterior[, "b"]>0.9)
sum( (posterior[, "b"]>0.9) & (posterior[, "b"]<1.1) )/nrow(posterior)
sum( (posterior[, "b"]>0.9) & (posterior[, "b"]<1.1) )
sum( (posterior[, "b"]>0.9) & (posterior[, "b"]<1.1) )/nrow(posterior)
df = data.frame(x=x,
y=y)
plot(df)
plot(df)
posterior[1,"a"]
posterior[1,"b"]
abline(posterior[1,"a"], posterior[1,"b"], col=adjustcolor("red", alpha.f=0.3))
plot(df)
for(i in 1:100){
abline(posterior[i,"a"], posterior[i,"b"], col=adjustcolor("red", alpha.f=0.3))
}
x.pred = seq(from=0, to=1, by=0.1)
x.pred
x.pred = seq(from=0, to=1, by=0.1)
y.cred = matrix(0, nrow=nrow(posterior), ncol=length(x.pred))
head(y.cred)
for(i in 1:nrow(posterior)){
y.cred[i, ] = posterior[i,"a"] + posterior[i,"b"]*x.pred
}
head(y.cred)
head(y.cred)
plot(df)
for(i in 1:100){
lines(x.pred, y.cred[i, ], col=adjustcolor("red", alpha.f=0.3))
}
y.cred[,1]
hist(y.cred[,1])
y.cred.mean = apply(y.cred, 2, function(x) mean(x))
plot(df)
y.cred.mean
lines(x.pred, y.cred.mean, col="red", lwd=2)
y.cred.q05 = apply(y.cred, 2, function(x) quantile(x, probs=0.05))
lines(x.pred, y.cred.q05, col="red", lwd=2, lty=2)
y.cred.q95 = apply(y.cred, 2, function(x) quantile(x, probs=0.95))
lines(x.pred, y.cred.q95, col="red", lwd=2, lty=2)
y.pred = matrix(0, nrow=nrow(posterior), ncol=length(x.pred))
y.pred = matrix(0, nrow=nrow(posterior), ncol=length(x.pred))
length(x.pred)
y.cred[i, ]
rep(posterior[i, "sigma"],length(x.pred))
for(i in 1:nrow(posterior)){
y.pred[i, ] = rnorm(n=length(x.pred), mean=y.cred[i, ], sd=rep(posterior[i, "sigma"],length(x.pred)) )
}
plot(df)
lines(x.pred, y.cred.mean, col="red", lwd=2)
lines(x.pred, y.cred.q05, col="red", lwd=2, lty=2)
lines(x.pred, y.cred.q95, col="red", lwd=2, lty=2)
y.pred.mean = apply(y.pred, 2, function(x) mean(x))
lines(x.pred, y.pred.mean, col="blue", lwd=2)
y.pred.q05 = apply(y.pred, 2, function(x) quantile(x, probs=0.05))
lines(x.pred, y.pred.q05, col="blue", lwd=2, lty=2)
y.pred.q95 = apply(y.pred, 2, function(x) quantile(x, probs=0.95))
lines(x.pred, y.pred.q95, col="blue", lwd=2, lty=2)
legend("topleft", legend=c("90% credible","90% prediction"), lwd=c(2,2), col=c("red","blue"), bty="n", lty=c(2,2))
y.cred[, 1]
y.cred[, 1]
y.pred[, 1]
hist(y.pred[, 1])
x.pred = df$x
x.pred = df$x
y.cred = matrix(0, nrow=nrow(posterior), ncol=length(x.pred))
for(i in 1:nrow(posterior)){
y.cred[i, ] = posterior[i,"a"] + posterior[i,"b"]*x.pred
}
y.cred.mean = apply(y.cred, 2, function(x) mean(x))
y.cred.q05 = apply(y.cred, 2, function(x) quantile(x, probs=0.05))
y.cred.q95 = apply(y.cred, 2, function(x) quantile(x, probs=0.95))
y.pred = matrix(0, nrow=nrow(posterior), ncol=length(x.pred))
for(i in 1:nrow(posterior)){
y.pred[i, ] = rnorm(n=length(x.pred), mean=y.cred[i, ], sd=rep(posterior[i, "sigma"],length(x.pred)) )
}
y.pred.mean = apply(y.pred, 2, function(x) mean(x))
y.pred.q05 = apply(y.pred, 2, function(x) quantile(x, probs=0.05))
y.pred.q95 = apply(y.pred, 2, function(x) quantile(x, probs=0.95))
plot(df$y, y.pred.mean, ylim=c(min(df$y), max(df$y)), xlab="observed", ylab="predicted")
abline(0,1)
abline(0,1)
for (i in 1:n){
lines(c(df$y[i], df$y[i]), c(y.pred.q05[i], y.pred.q95[i]))
}
plot(df$y, df$y-y.pred.mean)
abline(0,0)
print(fit)
print(fit)
summary.fit = summary(fit)$summary
summary.fit
summary.fit
plot(df)
abline(summary.fit["a","mean"], summary.fit["b","mean"], col="red", lwd=2)
points(x.pred,y.cred.mean, col="red", pch="+")
plot(df)
abline(summary.fit["a","mean"], summary.fit["b","mean"], col="red", lwd=2)
points(x.pred,y.cred.mean, col="red", pch="+")
legend("topleft", legend=c("prediction using mean parameters (WRONG!)","means of predictions"), bty="n",
lty=c(1,NA), pch=c(NA,"+"), col=c("red","red"), lwd=c(2,2))
setwd("~/git/bayesian-intro/source")
rm(list=ls())
library(rstan)
library(coda)
library(BayesianTools)
set.seed(123) # initiate random number generator for reproducability
rstan_options(auto_write = TRUE)
options(mc.cores = 3)
df = read.csv("~/git/bayesian-intro/data/FruitflyDataReduced.csv")
df$Thorax.norm = as.numeric(scale(df$Thorax))
df$group = as.integer(df$CompanionNumber)
data = list(y = df$Longevity,
x = df$Thorax.norm,
group = df$group,
n = nrow(df),
n_group = 5)
par(mfrow=c(2,3))
for (i in 1:5){
df.sub=subset(df, df$group==i)
plot(df.sub$Thorax.norm,  df.sub$Longevity,
xlim=range(df$Thorax.norm),
ylim=range(df$Longevity),
main=levels(df$CompanionNumber)[i]
)
}
par(mfrow=c(2,3))
for (i in 1:5){
df.sub=subset(df, df$group==i)
plot(df.sub$Thorax.norm,  df.sub$Longevity,
xlim=range(df$Thorax.norm),
ylim=range(df$Longevity),
main=levels(df$CompanionNumber)[i]
)
}
stan_code_partial = '
data {
int n;
int n_group;
real y[n];
real x[n];
int group[n];
}
parameters {
real a[n_group];
real b[n_group];
real<lower=0> sigma;
real mu_a;
real<lower=0> sigma_a;
real mu_b;
real<lower=0> sigma_b;
}
model {
// priors
mu_a ~ normal(0,100);
mu_b ~ normal(0,10);
sigma_a ~ cauchy(0,10);
sigma_b ~ cauchy(0,10);
for (j in 1:n_group){
a[j] ~ normal(mu_a,sigma_a);
b[j] ~ normal(mu_b,sigma_b);
}
sigma ~ normal(0,100);
// likelihood
for(i in 1:n){
y[i] ~ normal(a[group[i]]+b[group[i]]*x[i], sigma);
}
}
'
stan_model_partial = stan_model(model_code=stan_code_partial)
fit_partial  = sampling(stan_model_partial,
data=data,
chains=3,
iter=2000,
warmup=1000
)
fit_partial  = sampling(stan_model_partial,
data=data,
chains=3,
iter=2000,
warmup=1000,
control=list(adapt_delta=0.999, max_treedepth=12)
)
print(fit_partial, digits=3, probs=c(0.025, 0.975))
plot(fit_partial)
# plot(fit_partial, pars="a")
plot(As.mcmc.list(fit_partial)) # from coda package
posterior=as.matrix(fit_partial)
x.pred = seq(from=min(df$Thorax.norm), to=max(df$Thorax.norm), by=0.1)
par(mfrow=c(2,3))
for (i in 1:5){
df.sub=subset(df, df$group==i)
plot(df.sub$Thorax.norm,  df.sub$Longevity,
xlim=range(df$Thorax.norm),
ylim=range(df$Longevity),
main=levels(df$CompanionNumber)[i]
)
y.cred = matrix(0, nrow=nrow(posterior), ncol=length(x.pred))
for(j in 1:nrow(posterior)){
y.cred[j, ] = posterior[j,paste0("a[",i,"]")] + posterior[j,paste0("b[",i,"]")]*x.pred
}
y.cred.mean = apply(y.cred, 2, function(x) mean(x))
lines(x.pred, y.cred.mean, col="red", lwd=2)
y.cred.q05 = apply(y.cred, 2, function(x) quantile(x, probs=0.05))
lines(x.pred, y.cred.q05, col="red", lwd=2, lty=2)
y.cred.q95 = apply(y.cred, 2, function(x) quantile(x, probs=0.95))
lines(x.pred, y.cred.q95, col="red", lwd=2, lty=2)
}
df = read.csv("~/git/bayesian-intro/data/FruitflyDataReduced.csv")
df$Thorax.norm = as.numeric(scale(df$Thorax))
df$group = as.integer(df$CompanionNumber)
data = list(y = df$Longevity,
x = df$Thorax.norm,
group = df$group,
n = nrow(df),
n_group = 5)
par(mfrow=c(2,3))
for (i in 1:5){
df.sub=subset(df, df$group==i)
plot(df.sub$Thorax.norm,  df.sub$Longevity,
xlim=range(df$Thorax.norm),
ylim=range(df$Longevity),
main=levels(df$CompanionNumber)[i]
)
}
stan_code_partial = '
data {
int n;
int n_group;
real y[n];
real x[n];
int group[n];
}
parameters {
real a[n_group];
real b[n_group];
real<lower=0> sigma;
real mu_a;
real<lower=0> sigma_a;
real mu_b;
real<lower=0> sigma_b;
}
model {
// priors
mu_a ~ normal(0,100);
mu_b ~ normal(0,10);
sigma_a ~ cauchy(0,10);
sigma_b ~ cauchy(0,10);
for (j in 1:n_group){
a[j] ~ normal(mu_a,sigma_a);
b[j] ~ normal(mu_b,sigma_b);
}
sigma ~ normal(0,100);
// likelihood
for(i in 1:n){
y[i] ~ normal(a[group[i]]+b[group[i]]*x[i], sigma);
}
}
'
fit_partial  = sampling(stan_model_partial,
data=data,
chains=3,
iter=2000,
warmup=1000
)
fit_partial  = sampling(stan_model_partial,
data=data,
chains=3,
iter=2000,
warmup=1000,
control=list(adapt_delta=0.999, max_treedepth=12)
)
fit_partial  = sampling(stan_model_partial,
data=data,
chains=3,
iter=2000,
warmup=1000,
control=list(adapt_delta=0.999, max_treedepth=12)
)
print(fit_partial, digits=3, probs=c(0.025, 0.975))
plot(fit_partial)
# plot(fit_partial, pars="a")
plot(As.mcmc.list(fit_partial)) # from coda package
plot(As.mcmc.list(fit_partial)) # from coda package
stan_code_partial = '
data {
int n;
int n_group;
real y[n];
real x[n];
int group[n];
}
parameters {
real a[n_group];
real b[n_group];
real<lower=0> sigma;
real mu_a;
real<lower=0> sigma_a;
real mu_b;
real<lower=0> sigma_b;
}
model {
// priors
mu_a ~ normal(0,100);
mu_b ~ normal(0,10);
sigma_a ~ cauchy(0,10);
sigma_b ~ gamma(2,1);
for (j in 1:n_group){
a[j] ~ normal(mu_a,sigma_a);
b[j] ~ normal(mu_b,sigma_b);
}
sigma ~ normal(0,100);
// likelihood
for(i in 1:n){
y[i] ~ normal(a[group[i]]+b[group[i]]*x[i], sigma);
}
}
'
stan_model_partial = stan_model(model_code=stan_code_partial)
fit_partial  = sampling(stan_model_partial,
data=data,
chains=3,
iter=2000,
warmup=1000
)
fit_partial  = sampling(stan_model_partial,
data=data,
chains=3,
iter=2000,
warmup=1000,
control=list(adapt_delta=0.999, max_treedepth=12)
)
print(fit_partial, digits=3, probs=c(0.025, 0.975))
plot(fit_partial)
stan_code_partial = '
data {
int n;
int n_group;
real y[n];
real x[n];
int group[n];
}
parameters {
real a[n_group];
real b[n_group];
real<lower=0> sigma;
real mu_a;
real<lower=0> sigma_a;
real mu_b;
real<lower=0> sigma_b;
}
model {
// priors
mu_a ~ normal(0,100);
mu_b ~ normal(0,10);
sigma_a ~ cauchy(0,10);
sigma_b ~ cauchy(0,10);
for (j in 1:n_group){
a[j] ~ normal(mu_a,sigma_a);
b[j] ~ normal(mu_b,sigma_b);
}
sigma ~ normal(0,100);
// likelihood
for(i in 1:n){
y[i] ~ normal(a[group[i]]+b[group[i]]*x[i], sigma);
}
}
'
stan_model_partial = stan_model(model_code=stan_code_partial)
fit_partial  = sampling(stan_model_partial,
data=data,
chains=3,
iter=2000,
warmup=1000,
control=list(adapt_delta=0.999, max_treedepth=12)
)
print(fit_partial, digits=3, probs=c(0.025, 0.975))
plot(fit_partial)
# plot(fit_partial, pars="a")
plot(As.mcmc.list(fit_partial)) # from coda package
x.pred = seq(from=min(df$Thorax.norm), to=max(df$Thorax.norm), by=0.1)
par(mfrow=c(2,3))
for (i in 1:5){
df.sub=subset(df, df$group==i)
plot(df.sub$Thorax.norm,  df.sub$Longevity,
xlim=range(df$Thorax.norm),
ylim=range(df$Longevity),
main=levels(df$CompanionNumber)[i]
)
y.cred = matrix(0, nrow=nrow(posterior), ncol=length(x.pred))
for(j in 1:nrow(posterior)){
y.cred[j, ] = posterior[j,paste0("a[",i,"]")] + posterior[j,paste0("b[",i,"]")]*x.pred
}
y.cred.mean = apply(y.cred, 2, function(x) mean(x))
lines(x.pred, y.cred.mean, col="red", lwd=2)
y.cred.q05 = apply(y.cred, 2, function(x) quantile(x, probs=0.05))
lines(x.pred, y.cred.q05, col="red", lwd=2, lty=2)
y.cred.q95 = apply(y.cred, 2, function(x) quantile(x, probs=0.95))
lines(x.pred, y.cred.q95, col="red", lwd=2, lty=2)
}
